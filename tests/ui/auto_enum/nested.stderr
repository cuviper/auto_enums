error[E0308]: `match` arms have incompatible types
  --> $DIR/nested.rs:10:13
   |
3  |  / #[auto_enum(Iterator)]
4  |  | fn match_nop(x: usize) -> impl Iterator<Item = i32> {
5  |  |     match x {
   |  |_____-
6  | ||         0 => 1..8,
7  | ||         3 => {
8  | ||             // This strange formatting is a rustfmt bug.
9  | || #[nested] //~ ERROR E0308
10 | ||             2..=10
   | ||             ^^^^^^ expected enum `__Enummatch_nop`, found struct `RangeInclusive`
11 | ||         }
12 | ||         _ => (0..2).map(|x| x + 1),
13 | ||     }
   | ||_____- `match` arms have incompatible types
...   |
   |
   = note: expected type `__Enummatch_nop<std::ops::Range<{integer}>, _>`
            found struct `RangeInclusive<{integer}>`

error[E0308]: `if` and `else` have incompatible types
  --> $DIR/nested.rs:16:1
   |
16 |  / #[auto_enum(Iterator)]
17 |  | fn if_nop(x: usize) -> impl Iterator<Item = i32> {
18 |  |     if x == 0 {
19 |  |         1..8
20 |  |     } else if x > 3 {
   |  |____________-
21 | ||         // This strange formatting is a rustfmt bug.
22 | || #[nested] //~ ERROR E0308
23 | ||         2..=10
   | ||         ------ expected because of this
24 | ||     } else {
25 | ||         (0..2).map(|x| x + 1)
26 | ||     }
   | ||_____- `if` and `else` have incompatible types
...   |
   |
   = note: expected type `RangeInclusive<{integer}>`
              found enum `__Enumif_nop<_, Map<std::ops::Range<{integer}>, [closure@$DIR/tests/ui/auto_enum/nested.rs:25:20: 25:29]>>`
   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)
